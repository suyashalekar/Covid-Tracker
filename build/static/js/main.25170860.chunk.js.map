{"version":3,"sources":["component/Infobox.jsx","component/LineGraph.jsx","util.js","component/Map.jsx","component/Table.jsx","App.js","reportWebVitals.js","index.js"],"names":["Infobox","title","cases","total","Card","CardContent","Typography","className","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sort","b","showDataOnMap","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","background","flag","width","height","backgroundPosition","backgroundSize","Map","countries","zoom","center1","setCenter1","TileLayer","url","attribution","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapCountries","setMapCountries","mapZoom","setMapZoom","onCountryChange","e","countryCode","target","name","iso2","sortedData","getCountriesDate","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25170860.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport '../css/Infobox.css';\r\nfunction Infobox({ title, cases, total }) {\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className=\"infoBox__cases\">{cases}</h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Infobox;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format('+0,0');\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: 'time',\r\n        time: {\r\n          format: 'MM/DD/YY',\r\n          tooltipFormat: 'll',\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format('0a');\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, 'cases');\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n                borderColor: '#CC1034',\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import '../css/LineGraph.css';\r\n// import { Line } from 'react-chartjs-2';\r\n// import numeral from 'numeral';\r\n\r\n// const options = {\r\n//   legend: {\r\n//     display: false,\r\n//   },\r\n//   elements: {\r\n//     point: {\r\n//       radius: 0,\r\n//     },\r\n//   },\r\n//   maintainAspectRatio: false,\r\n//   tooltips: {\r\n//     mode: 'index',\r\n//     intersect: false,\r\n//     callbacks: {\r\n//       label: function (tooltipItem, data) {\r\n//         return numeral(tooltipItem.value).format('+0,0');\r\n//       },\r\n//     },\r\n//   },\r\n//   scales: {\r\n//     xAxes: [\r\n//       {\r\n//         type: 'time',\r\n//         time: {\r\n//           format: 'MM/DD/YY',\r\n//           tooltipFormat: 'll',\r\n//         },\r\n//       },\r\n//     ],\r\n//     yAxes: [\r\n//       {\r\n//         gridLines: {\r\n//           display: false,\r\n//         },\r\n//         ticks: {\r\n//           // Include a dollar sign in the ticks\r\n//           callback: function (value, index, values) {\r\n//             return numeral(value).format('0a');\r\n//           },\r\n//         },\r\n//       },\r\n//     ],\r\n//   },\r\n// };\r\n\r\n// const buildChartData = (data, casesType = 'cases') => {\r\n//   let chartData = [];\r\n//   let lastDataPoint;\r\n//   for (let date in data.cases) {\r\n//     if (lastDataPoint) {\r\n//       let newDataPoint = {\r\n//         x: date,\r\n//         y: data[casesType][date] - lastDataPoint,\r\n//       };\r\n//       chartData.push(newDataPoint);\r\n//     }\r\n//     lastDataPoint = data[casesType][date];\r\n//   }\r\n//   return chartData;\r\n// };\r\n\r\n// function LineGraph({ caseType = 'cases' }) {\r\n//   const [data, setData] = useState({});\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n//         .then((response) => response.json())\r\n//         .then((data) => {\r\n//           const chartData = buildChartData(data, 'cases');\r\n//           setData(chartData);\r\n//         });\r\n//     };\r\n//     fetchData();\r\n//   }, [caseType]);\r\n\r\n//   return (\r\n//     <div className=\"lineGraph\">\r\n//       {data?.length > 0 && (\r\n//         <Line\r\n//           options={options}\r\n//           data={{\r\n//             datasets: [\r\n//               {\r\n//                 backgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n//                 borderColor: '#CC1034',\r\n//                 data: data,\r\n//               },\r\n//             ],\r\n//           }}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default LineGraph;\r\n// // //https://disease.sh/v3/covid-19/historical/all?lastdays=30\r\n","import numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\nimport React from 'react';\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: '#CC1034',\r\n    rgb: 'rgb(204, 16, 52)',\r\n    half_op: 'rgba(204, 16, 52, 0.5)',\r\n    multiplier: 200,\r\n  },\r\n  recovered: {\r\n    hex: '#7dd71d',\r\n    rgb: 'rgb(125, 215, 29)',\r\n    half_op: 'rgba(125, 215, 29, 0.5)',\r\n    multiplier: 320,\r\n  },\r\n  deaths: {\r\n    hex: '#fb4443',\r\n    rgb: 'rgb(251, 68, 67)',\r\n    half_op: 'rgba(251, 68, 67, 0.5)',\r\n    multiplier: 400,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  //   sortedData.sort((a, b) => {\r\n  //     if (a.cases > b.cases) {\r\n  //       return -1;\r\n  //     } else {\r\n  //       return 1;\r\n  //     }\r\n  //   });\r\n  //   return sortedData.sort();\r\n  //   return sortedData;\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n//return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n  data.map((country) => (\r\n    <Circle \r\n    center={[country.countryInfo.lat, country.countryInfo.long]} \r\n    color={casesTypeColors[casesType].hex} \r\n    fillColor={casesTypeColors[casesType].hex} \r\n    fillOpacity={0.4} \r\n    radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}>\r\n     \r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div className=\"info-flag\" style={{ background: `url(${country.countryInfo.flag})` , width :'3rem' , height : \"2rem\" , backgroundPosition : 'center' ,\r\n        backgroundSize: 'cover'}}>\r\n\r\n          </div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">Cases: {numeral(country.cases).format('0,0')}</div>\r\n          <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format('0,0')}</div>\r\n          <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format('0,0')}</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React, { useEffect, useState } from 'react';\r\nimport { MapContainer as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport '../css/Map.css';\r\nimport { showDataOnMap } from '../util';\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  console.log(`this is a map = ${center}`);\r\n  // console.log(`this is a map = ${center.lat} , ${center.lng}`);\r\n  const [center1, setCenter1] = useState(center);\r\n  useEffect(() => {\r\n    setCenter1(center);\r\n  });\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center1} zoom={zoom}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n\r\n// import React from 'react';\r\n// import '../css/Map.css';\r\n// import { Map as LeafletMap, TitleLayer } from 'react-leaflet';\r\n\r\n// function Map() {\r\n//   return (\r\n//     <div className=\"map\">\r\n//       <LeafletMap>\r\n//         <TitleLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\r\n//       </LeafletMap>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Map;\r\n","import React from 'react';\r\nimport '../css/Table.css';\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>{cases}</td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Infobox from './component/Infobox';\nimport LineGraph from './component/LineGraph';\nimport Map from './component/Map';\nimport Table from './component/Table';\nimport { sortData } from './util';\nimport 'leaflet/dist/leaflet.css';\n\nexport default function App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapCountries, setMapCountries] = useState([]);\n  // const [mapCenter, setMapCenter] = useState([22, 77]);\n  const [mapZoom, setMapZoom] = useState(3);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url = countryCode == 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapZoom(2);\n        const lat = data.countryInfo.lat;\n        const long = data.countryInfo.long;\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n  console.log(countryInfo);\n  //   !Fetch data for world wide cases\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesDate = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n    getCountriesDate();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        {/* app_header */}\n\n        <div className=\"app__header\">\n          <h1>Covid-19-tracker</h1>\n\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n              <MenuItem value=\"worldwide\">World Wide</MenuItem>\n\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* app_stats */}\n        <div className=\"app__stats\">\n          <Infobox title=\"Coronavirus Cases\" cases={countryInfo.todayCases} total={countryInfo.cases} />\n\n          <Infobox title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} />\n\n          <Infobox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} />\n        </div>\n\n        {/* //!app_map */}\n        <Map countries={mapCountries} casesType='cases' center={mapCenter} zoom={mapZoom} />\n      </div>\n      <div className=\"app__right\">\n        <Card>\n          <CardContent>\n            <h3>Live cases by country</h3>\n            <Table countries={tableData} />\n\n            <h3>worldwide new cases</h3>\n            <LineGraph />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n//  https://disease.sh/v3/covid-19/all\n//  https://disease.sh/v3/covid-19/countries\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}